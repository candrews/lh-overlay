# fix compilation error: ambiguity between std::bit_or and ObjexxFCL::bit_or,
# the latter being the only one which provides the correct call signature


--- a/rosetta++/packing_measures.cc	2008-04-17 22:27:01.000000000 +0200
+++ b/rosetta++/packing_measures.cc	2008-12-06 00:13:50.000000000 +0100
@@ -1075,7 +1075,8 @@
 								point = angles(aphi,theta);
 								masknum = point*100+olp;
 								for ( int bb = 1; bb <= nbytes; ++bb ) {
-									tmp_sasa_mask(bb) = bit_or( tmp_sasa_mask(bb), masks(bb,masknum) );
+									tmp_sasa_mask(bb) = 
+										ObjexxFCL::bit_or( tmp_sasa_mask(bb), masks(bb,masknum) );
 								}
 								//}    // pr_bin
 							} else if ( dist_sq > 289.0 ) {
@@ -1210,7 +1211,8 @@
 
 											for ( int bb = 1, l = atom_sasa_masks_.index(bb,ia,ir,pr_bin);
 														bb <= nbytes; ++bb, ++l ) { // [ l ] = (bb,ia,ir,pr_bin)
-												atom_sasa_masks_[ l ] = bit_or( atom_sasa_masks_[ l ], masks(bb,masknum) );
+												atom_sasa_masks_[ l ] = 
+													ObjexxFCL::bit_or( atom_sasa_masks_[ l ], masks(bb,masknum) );
 											}
 											// account for i overlapping j:
 											get_overlap(jc,jrad,ic,irad,dist,olp);
@@ -1219,7 +1221,8 @@
 											masknum = point*100+olp;
 											for ( int bb = 1, l = atom_sasa_masks_.index(bb,ja,jr,pr_bin);
 														bb <= nbytes; ++bb, ++l ) { // [ l ] = (bb,ja,jr,pr_bin)
-												atom_sasa_masks_[ l ] = bit_or( atom_sasa_masks_[ l ], masks(bb,masknum) );
+												atom_sasa_masks_[ l ] = 
+													ObjexxFCL::bit_or( atom_sasa_masks_[ l ], masks(bb,masknum) );
 											}
 										}    // pr_bin
 									} else if ( dist_sq > 289.0 ) {
@@ -1583,7 +1586,8 @@
 				masknum = point*100+olp;
 				for ( int bb = 1, l = prune_sasa_masks.index(bb,ii);
 							bb <= nbytes; ++bb, ++l ) { // [ l ] = (bb,ia,ir,pr_bin)
-					prune_sasa_masks[ l ] = bit_or( prune_sasa_masks[ l ], masks(bb,masknum) );
+					prune_sasa_masks[ l ] = 
+						ObjexxFCL::bit_or( prune_sasa_masks[ l ], masks(bb,masknum) );
 				}
 								/*					 }   // jk if not water         */
 		  }            // ja
@@ -1659,7 +1663,8 @@
 					point = angles(aphi,theta);
 					masknum = point*100+olp;
 					for ( int bb = 1, l = prune_sasa_masks.index(bb,ii); bb <= nbytes; ++bb, ++l ) {
-						prune_sasa_masks[ l ] = bit_or( prune_sasa_masks[ l ], masks(bb,masknum) );
+						prune_sasa_masks[ l ] = 
+							ObjexxFCL::bit_or( prune_sasa_masks[ l ], masks(bb,masknum) );
 					}
 
 		/*			//ii overlaping jj
@@ -1765,7 +1770,8 @@
 			point = angles(aphi,theta);
 			masknum = point*100+olp;
 			for ( int bb = 1;	bb <= nbytes; ++bb ) {
-				hole_sasa_mask(bb) = bit_or( hole_sasa_mask(bb), masks(bb,masknum) );
+				hole_sasa_mask(bb) = 
+					ObjexxFCL::bit_or( hole_sasa_mask(bb), masks(bb,masknum) );
 			}
 		}            // ja
 	}           // jr
@@ -1808,7 +1814,8 @@
 		point = angles(aphi,theta);
 		masknum = point*100+olp;
 		for ( int bb = 1; bb <= nbytes; ++bb )
-				hole_sasa_mask(bb) = bit_or( hole_sasa_mask(bb), masks(bb,masknum) );
+				hole_sasa_mask(bb) = 
+					ObjexxFCL::bit_or( hole_sasa_mask(bb), masks(bb,masknum) );
 
 		////ii overlaping jj TODO somehow allow for this to make more efficient?
 												// requires masks to be input as argument
