diff --git a/src/main/com/mucommander/commons/file/impl/s3/S3Bucket.java b/src/main/com/mucommander/commons/file/impl/s3/S3Bucket.java
index 9195f27..285e1e0 100644
--- a/src/main/com/mucommander/commons/file/impl/s3/S3Bucket.java
+++ b/src/main/com/mucommander/commons/file/impl/s3/S3Bucket.java
@@ -23,6 +23,7 @@ import com.mucommander.commons.file.*;
 import com.mucommander.commons.io.RandomAccessInputStream;
 import org.jets3t.service.S3Service;
 import org.jets3t.service.S3ServiceException;
+import org.jets3t.service.ServiceException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -95,7 +96,7 @@ public class S3Bucket extends S3File {
         try {
             service.deleteBucket(bucketName);
         }
-        catch(S3ServiceException e) {
+        catch(ServiceException e) {
             throw getIOException(e);
         }
     }
@@ -105,7 +106,7 @@ public class S3Bucket extends S3File {
         try {
             service.createBucket(bucketName);
         }
-        catch(S3ServiceException e) {
+        catch(ServiceException e) {
             throw getIOException(e);
         }
     }
diff --git a/src/main/com/mucommander/commons/file/impl/s3/S3File.java b/src/main/com/mucommander/commons/file/impl/s3/S3File.java
index 93985db..1687166 100644
--- a/src/main/com/mucommander/commons/file/impl/s3/S3File.java
+++ b/src/main/com/mucommander/commons/file/impl/s3/S3File.java
@@ -26,6 +26,8 @@ import org.jets3t.service.Constants;
 import org.jets3t.service.S3ObjectsChunk;
 import org.jets3t.service.S3Service;
 import org.jets3t.service.S3ServiceException;
+import org.jets3t.service.ServiceException;
+import org.jets3t.service.StorageObjectsChunk;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -49,11 +51,11 @@ public abstract class S3File extends ProtocolFile {
         this.service = service;
     }
     
-    protected IOException getIOException(S3ServiceException e) throws IOException {
+    protected IOException getIOException(ServiceException e) throws IOException {
         return getIOException(e, fileURL);
     }
 
-    protected static IOException getIOException(S3ServiceException e, FileURL fileURL) throws IOException {
+    protected static IOException getIOException(ServiceException e, FileURL fileURL) throws IOException {
         handleAuthException(e, fileURL);
 
         Throwable cause = e.getCause();
@@ -66,7 +68,7 @@ public abstract class S3File extends ProtocolFile {
         return new IOException(e.getMessage());
     }
 
-    protected static void handleAuthException(S3ServiceException e, FileURL fileURL) throws AuthException {
+    protected static void handleAuthException(ServiceException e, FileURL fileURL) throws AuthException {
         int code = e.getResponseCode();
         if(code==401 || code==403)
             throw new AuthException(fileURL);
@@ -74,8 +76,8 @@ public abstract class S3File extends ProtocolFile {
     
     protected AbstractFile[] listObjects(String bucketName, String prefix, S3File parent) throws IOException {
         try {
-            S3ObjectsChunk chunk = service.listObjectsChunked(bucketName, prefix, "/", Constants.DEFAULT_OBJECT_LIST_CHUNK_SIZE, null, true);
-            org.jets3t.service.model.S3Object objects[] = chunk.getObjects();
+            StorageObjectsChunk chunk = service.listObjectsChunked(bucketName, prefix, "/", Constants.DEFAULT_OBJECT_LIST_CHUNK_SIZE, null, true);
+            org.jets3t.service.model.StorageObject objects[] = chunk.getObjects();
             String[] commonPrefixes = chunk.getCommonPrefixes();
 
             if(objects.length==0 && !prefix.equals("")) {
@@ -88,7 +90,7 @@ public abstract class S3File extends ProtocolFile {
             int i=0;
             String objectKey;
 
-            for(org.jets3t.service.model.S3Object object : objects) {
+            for(org.jets3t.service.model.StorageObject object : objects) {
                 // Discard the object corresponding to the prefix itself
                 objectKey = object.getKey();
                 if(objectKey.equals(prefix))
@@ -126,7 +128,7 @@ public abstract class S3File extends ProtocolFile {
 
             return children;
         }
-        catch(S3ServiceException e) {
+        catch(ServiceException e) {
             throw getIOException(e);
         }
     }
diff --git a/src/main/com/mucommander/commons/file/impl/s3/S3Object.java b/src/main/com/mucommander/commons/file/impl/s3/S3Object.java
index cdc8092..9b3d859 100644
--- a/src/main/com/mucommander/commons/file/impl/s3/S3Object.java
+++ b/src/main/com/mucommander/commons/file/impl/s3/S3Object.java
@@ -26,7 +26,9 @@ import com.mucommander.commons.io.RandomAccessInputStream;
 import com.mucommander.commons.io.StreamUtils;
 import org.jets3t.service.S3Service;
 import org.jets3t.service.S3ServiceException;
+import org.jets3t.service.ServiceException;
 import org.jets3t.service.model.S3Owner;
+import org.jets3t.service.model.StorageOwner;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -177,7 +179,7 @@ public class S3Object extends S3File {
             atts.setDirectory(false);
             atts.setSize(0);
         }
-        catch(S3ServiceException e) {
+        catch(ServiceException e) {
             throw getIOException(e);
         }
     }
@@ -216,7 +218,7 @@ public class S3Object extends S3File {
             destObjectFile.atts.setAttributes(destObject);
             destObjectFile.atts.setExists(true);
         }
-        catch(S3ServiceException e) {
+        catch(ServiceException e) {
             throw getIOException(e);
         }
     }
@@ -233,7 +235,7 @@ public class S3Object extends S3File {
             // add unnecessary billing overhead since it reads the object chunk by chunk, each in a separate GET request.
             return service.getObject(bucketName, getObjectKey(false), null, null, null, null, offset==0?null:offset, null).getDataInputStream();
         }
-        catch(S3ServiceException e) {
+        catch(ServiceException e) {
             throw getIOException(e);
         }
     }
@@ -452,7 +454,7 @@ public class S3Object extends S3File {
                         .getDataInputStream();
                     this.offset = offset;
                 }
-                catch(S3ServiceException e) {
+                catch(ServiceException e) {
                     throw getIOException(e);
                 }
             }
@@ -607,13 +609,13 @@ public class S3Object extends S3File {
             updateExpirationDate(); // declare the attributes as 'fresh'
         }
 
-        private void setAttributes(org.jets3t.service.model.S3Object object) {
+        private void setAttributes(org.jets3t.service.model.StorageObject object) {
             setDirectory(object.getKey().endsWith("/"));
             setSize(object.getContentLength());
             setDate(object.getLastModifiedDate().getTime());
             setPermissions(DEFAULT_PERMISSIONS);
             // Note: owner is null for common prefix objects
-            S3Owner owner = object.getOwner();
+            StorageOwner owner = object.getOwner();
             setOwner(owner==null?null:owner.getDisplayName());
         }
 
@@ -623,7 +625,7 @@ public class S3Object extends S3File {
                 // Object does not exist on the server
                 setExists(true);
             }
-            catch(S3ServiceException e) {
+            catch(ServiceException e) {
                 // Object does not exist on the server, or could not be retrieved
                 setExists(false);
 
